from spectral import *
# from mayavi import mlab
import spectral.io.envi as envi
import numpy as np
import matplotlib.pyplot as plt


# this function assumes listWavelength is in ascending order
def find_RGB_bands(listWavelength):
    R_wavelength = 682.5  # (625+740)/2
    G_wavelength = 532.5  # (495+570)/2
    B_wavelength = 472.5  # (450+495)/2
    listlen = len(listWavelength)
    if listlen < 3:
        print("Error: not a hyperspectral file")
        return
    if listWavelength[0] > B_wavelength or listWavelength[-1] < R_wavelength:  # if not fully include RGB bands
        return (round(5 * listlen / 6), round(listlen / 2),
                round(listlen / 6))  # considering edge effect, not use (len, len/2, 1)

    rFound = gFound = bFound = False
    rPreDifference = gPreDifference = bPreDifference = float('inf')  # previously calculated difference
    rIndex = gIndex = bIndex = 0

    for i, value in enumerate(listWavelength):
        if not rFound:
            difference = abs(value - R_wavelength)
            if difference < rPreDifference:
                rPreDifference = difference
            else:  # when the distance starts to grow bigger, the index is found, and it should be the previous i
                rIndex = i - 1
                rFound = True

        if not gFound:
            difference = abs(value - G_wavelength)
            if difference < gPreDifference:
                gPreDifference = difference
            else:
                gIndex = i - 1
                gFound = True

        if not bFound:
            difference = abs(value - B_wavelength)
            if difference < bPreDifference:
                bPreDifference = difference
            else:
                bIndex = i - 1
                bFound = True

    return (rIndex, gIndex, bIndex)


def read_PSI_header(filePath):
    data_dict = {}
    # Open the text file
    with open(filePath, "r") as file:
        lines = file.readlines()
    # Parse the lines and store values in the dictionary
    wavelengths = []
    for line in lines:
        parts = line.strip().split(" ")
        if "WAVELENGTHS" in parts:
            reading_wavelengths = True
            continue
        elif "WAVELENGTHS_END" in parts:
            reading_wavelengths = False
            data_dict["WAVELENGTHS"] = wavelengths
            continue

        if len(parts) == 2:
            key, value = parts
            data_dict[key] = value
        elif reading_wavelengths:
            wavelengths.append(float(parts[0]))

    # Display the parsed data
    return data_dict


# create an ENVI header file for PSI images
def create_envi_header(filename, dictMeta):
    with open(filename, 'w') as file:
        file.write("ENVI\n")
        file.write("description = {Generated by Python}\n")
        file.write("bands = {}\n".format(dictMeta['NBANDS']))
        file.write("byte order = 0\n")
        file.write("data type = {}\n".format(dictMeta['NBITS']))
        file.write("file type = ENVI Standard\n")
        file.write("header offset = 0\n")
        file.write("interleave = {}\n".format(dictMeta['LAYOUT'].lower()))
        file.write("lines = {}\n".format(dictMeta['NROWS']))
        file.write("samples = {}\n".format(dictMeta['NCOLS']))
        # file.write("sensor type = Unknown\n")

        file.write("wavelength units = nm\n")
        file.write("wavelength = {")
        # for wavelength in dictMeta['WAVELENGTHS']:
        # file.write("{:.2f}, ".format(wavelength))
        file.write(','.join(map(str, dictMeta['WAVELENGTHS'])))
        file.write("}\n")


def show_rgb(hsi, save_path):
    tuple_rgb_bands = find_RGB_bands([float(i) for i in hsi.metadata[
        'wavelength']])  # metadata['wavelength'] is read as string; for CSIRO image, can use self.hsi.bands.centers
    rgb_image = get_rgb(hsi, tuple_rgb_bands)  # (100, 54, 31)
    rgb_image = (rgb_image * 255).astype(np.uint8)
    rgb_image = rgb_image.copy()  # Spy don't load it to memory automatically, so must be copie
    print(f"RGB Image Shape: {rgb_image.shape}")
    plt.imshow(rgb_image)
    plt.axis('off')
    plt.show()
    plt.imsave(save_path, rgb_image)


def visualize_hypercube(hsi_data):
    # 假设 hsi_data 是形状为 (height, width, bands) 的 numpy 数组
    height, width, bands = hsi_data.shape

    # 选择几个波段进行展示
    band1, band2, band3 = 30, 50, 100
    slice_x = hsi_data[:, :, band1]
    slice_y = hsi_data[:, :, band2]
    slice_z = hsi_data[:, :, band3]

    # 归一化每个波段以便于展示
    slice_x = (slice_x - np.min(slice_x)) / (np.max(slice_x) - np.min(slice_x))
    slice_y = (slice_y - np.min(slice_y)) / (np.max(slice_y) - np.min(slice_y))
    slice_z = (slice_z - np.min(slice_z)) / (np.max(slice_z) - np.min(slice_z))

    # 创建3D图像
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    # 在z=0平面展示slice_x
    ax.plot_surface(np.arange(width), np.arange(height), np.zeros_like(slice_x), rstride=1, cstride=1,
                    facecolors=plt.cm.viridis(slice_x), shade=False)

    # 在y=width平面展示slice_y
    ax.plot_surface(np.zeros_like(slice_y) + width, np.arange(height), np.arange(bands), rstride=1, cstride=1,
                    facecolors=plt.cm.viridis(slice_y.T), shade=False)

    # 在x=0平面展示slice_z
    ax.plot_surface(np.arange(width), np.zeros_like(slice_z) + height, np.arange(bands), rstride=1, cstride=1,
                    facecolors=plt.cm.viridis(slice_z.T), shade=False)

    # 调整视角
    ax.view_init(elev=30, azim=120)

    plt.show()


def load_image(image_path, headerPath):
    # check if it's PSI image format
    with open(headerPath, "r") as file:
        first_line = file.readline().strip()
    print(first_line)
    if first_line.startswith("BYTEORDER"):  # PSI format
        dictMeta = read_PSI_header(headerPath)
        headerPath = header_path
        create_envi_header(headerPath, dictMeta)

    hsi = envi.open(headerPath, image_path)
    return hsi


header_path = "Data/2021-03-31--12-56-31_round-0_cam-1_tray-Tray_1.hdr"
bil_path = "Data/2021-03-31--12-56-31_round-0_cam-1_tray-Tray_1.bil"
save_path = "Result.jpg"
hsi = load_image(bil_path, header_path)
# show_rgb(hsi, save_path)
print(dir(hsi))

visualize_hypercube(hsi)


