from spectral import *
# from mayavi import mlab
import spectral.io.envi as envi
import numpy as np
import matplotlib.pyplot as plt


# this function assumes listWavelength is in ascending order
def find_RGB_bands(listWavelength):
    R_wavelength = 682.5  # (625+740)/2
    G_wavelength = 532.5  # (495+570)/2
    B_wavelength = 472.5  # (450+495)/2
    listlen = len(listWavelength)
    if listlen < 3:
        print("Error: not a hyperspectral file")
        return
    if listWavelength[0] > B_wavelength or listWavelength[-1] < R_wavelength:  # if not fully include RGB bands
        return (round(5 * listlen / 6), round(listlen / 2),
                round(listlen / 6))  # considering edge effect, not use (len, len/2, 1)

    rFound = gFound = bFound = False
    rPreDifference = gPreDifference = bPreDifference = float('inf')  # previously calculated difference
    rIndex = gIndex = bIndex = 0

    for i, value in enumerate(listWavelength):
        if not rFound:
            difference = abs(value - R_wavelength)
            if difference < rPreDifference:
                rPreDifference = difference
            else:  # when the distance starts to grow bigger, the index is found, and it should be the previous i
                rIndex = i - 1
                rFound = True

        if not gFound:
            difference = abs(value - G_wavelength)
            if difference < gPreDifference:
                gPreDifference = difference
            else:
                gIndex = i - 1
                gFound = True

        if not bFound:
            difference = abs(value - B_wavelength)
            if difference < bPreDifference:
                bPreDifference = difference
            else:
                bIndex = i - 1
                bFound = True

    return (rIndex, gIndex, bIndex)


def read_PSI_header(filePath):
    data_dict = {}
    # Open the text file
    with open(filePath, "r") as file:
        lines = file.readlines()
    # Parse the lines and store values in the dictionary
    wavelengths = []
    for line in lines:
        parts = line.strip().split(" ")
        if "WAVELENGTHS" in parts:
            reading_wavelengths = True
            continue
        elif "WAVELENGTHS_END" in parts:
            reading_wavelengths = False
            data_dict["WAVELENGTHS"] = wavelengths
            continue

        if len(parts) == 2:
            key, value = parts
            data_dict[key] = value
        elif reading_wavelengths:
            wavelengths.append(float(parts[0]))

    # Display the parsed data
    return data_dict


# create an ENVI header file for PSI images
def create_envi_header(filename, dictMeta):
    with open(filename, 'w') as file:
        file.write("ENVI\n")
        file.write("description = {Generated by Python}\n")
        file.write("bands = {}\n".format(dictMeta['NBANDS']))
        file.write("byte order = 0\n")
        file.write("data type = {}\n".format(dictMeta['NBITS']))
        file.write("file type = ENVI Standard\n")
        file.write("header offset = 0\n")
        file.write("interleave = {}\n".format(dictMeta['LAYOUT'].lower()))
        file.write("lines = {}\n".format(dictMeta['NROWS']))
        file.write("samples = {}\n".format(dictMeta['NCOLS']))
        # file.write("sensor type = Unknown\n")

        file.write("wavelength units = nm\n")
        file.write("wavelength = {")
        # for wavelength in dictMeta['WAVELENGTHS']:
        # file.write("{:.2f}, ".format(wavelength))
        file.write(','.join(map(str, dictMeta['WAVELENGTHS'])))
        file.write("}\n")

def plot_spectrum(hsi_data, x, y, wavelengths=None):
    """
    绘制给定像素点的光谱曲线。

    参数:
    - hsi_data: 高光谱图像数据，形状为 (height, width, bands)
    - x, y: 选定像素点的坐标
    - wavelengths: 对应的波长列表（可选），如果提供，将在x轴上展示波长而不是波段索引
    """
    # 提取像素点在所有波段上的光谱数据
    spectrum = hsi_data[y, x, :]  # 注意y是行，x是列

    # 如果 spectrum 是一个多维数组，需要将其展平成一维
    spectrum = spectrum.flatten()

    # 绘制光谱图
    plt.figure(figsize=(10, 6))
    if wavelengths is not None:
        plt.plot(wavelengths, spectrum)
        plt.xlabel("Wavelength (nm)")
    else:
        plt.plot(range(spectrum.shape[0]), spectrum)
        plt.xlabel("Band Index")

    plt.ylabel("Reflectance")
    plt.title(f"Spectrum at Pixel ({x}, {y})")
    plt.grid(True)
    plt.show()



def load_image(image_path, headerPath):
    # check if it's PSI image format
    with open(headerPath, "r") as file:
        first_line = file.readline().strip()
    if first_line.startswith("BYTEORDER"):  # PSI format
        dictMeta = read_PSI_header(headerPath)
        headerPath = header_path
        create_envi_header(headerPath, dictMeta)

    hsi = envi.open(headerPath, image_path)
    return hsi


header_path = "Data/2021-03-31--12-56-31_round-0_cam-1_tray-Tray_1.hdr"
bil_path = "Data/2021-03-31--12-56-31_round-0_cam-1_tray-Tray_1.bil"
save_path = "Result.jpg"
hsi = load_image(bil_path, header_path)

# 从元数据中提取波长信息并保存到一个变量
wavelengths = [float(w) for w in hsi.metadata['wavelength']]
# xy 用户输入的数值
plot_spectrum(hsi, x=50, y=50, wavelengths=wavelengths)

