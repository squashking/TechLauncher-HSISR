from spectral import *
import spectral.io.envi as envi
import numpy as np
import matplotlib.pyplot as plt
import os
# this function assumes listWavelength is in ascending order    
def find_RGB_bands(listWavelength):
    R_wavelength = 682.5 #(625+740)/2 
    G_wavelength = 532.5  #(495+570)/2 
    B_wavelength = 472.5  #(450+495)/2 
    listlen = len(listWavelength) 
    if listlen < 3:
        print("Error: not a hyperspectral file")
        return
    if listWavelength[0] > B_wavelength or listWavelength[-1] < R_wavelength: # if not fully include RGB bands
        return (round(5*listlen/6), round(listlen/2), round(listlen/6)) # considering edge effect, not use (len, len/2, 1)
    
    rFound = gFound = bFound = False
    rPreDifference = gPreDifference = bPreDifference = float('inf') # previously calculated difference
    rIndex = gIndex = bIndex = 0

    for i, value in enumerate(listWavelength):
        if not rFound:
            difference = abs(value - R_wavelength)
            if difference < rPreDifference:  
                rPreDifference = difference
            else: # when the distance starts to grow bigger, the index is found, and it should be the previous i
                rIndex = i-1
                rFound = True

        if not gFound:
            difference = abs(value - G_wavelength)
            if difference < gPreDifference:
                gPreDifference = difference
            else:
                gIndex = i-1
                gFound = True

        if not bFound:
            difference = abs(value - B_wavelength)
            if difference < bPreDifference:
                bPreDifference = difference
            else:
                bIndex = i-1
                bFound = True 

    return (rIndex, gIndex, bIndex) 

def read_PSI_header(filePath):
    data_dict = {}
    # Open the text file
    with open(filePath, "r") as file:
        lines = file.readlines()
    # Parse the lines and store values in the dictionary
    wavelengths = []
    for line in lines:
        parts = line.strip().split(" ")
        if "WAVELENGTHS" in parts:
            reading_wavelengths = True
            continue
        elif "WAVELENGTHS_END" in parts:
            reading_wavelengths = False
            data_dict["WAVELENGTHS"] = wavelengths
            continue
        
        if len(parts) == 2:
            key, value = parts
            data_dict[key] = value
        elif reading_wavelengths:
            wavelengths.append(float(parts[0]))

    # Display the parsed data
    return data_dict      

#create an ENVI header file for PSI images
def create_envi_header(filename, dictMeta):
    with open(filename, 'w') as file:
        file.write("ENVI\n")
        file.write("description = {Generated by Python}\n")
        file.write("bands = {}\n".format(dictMeta['NBANDS']))
        file.write("byte order = 0\n")
        file.write("data type = {}\n".format(dictMeta['NBITS']))
        file.write("file type = ENVI Standard\n")
        file.write("header offset = 0\n")  
        file.write("interleave = {}\n".format(dictMeta['LAYOUT'].lower()))
        file.write("lines = {}\n".format(dictMeta['NROWS']))
        file.write("samples = {}\n".format(dictMeta['NCOLS']))
        # file.write("sensor type = Unknown\n")
        
        file.write("wavelength units = nm\n")        
        file.write("wavelength = {")
        # for wavelength in dictMeta['WAVELENGTHS']:
            # file.write("{:.2f}, ".format(wavelength))
        file.write(','.join(map(str, dictMeta['WAVELENGTHS'])))
        file.write("}\n")


def show_rgb(hsi,save_path):
    tuple_rgb_bands = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])  # metadata['wavelength'] is read as string; for CSIRO image, can use self.hsi.bands.centers
    rgb_image = get_rgb(hsi, tuple_rgb_bands)  # (100, 54, 31)
    rgb_image = (rgb_image*255).astype(np.uint8)
    rgb_image = rgb_image.copy() # Spy don't load it to memory automatically, so must be copie
    print(f"RGB Image Shape: {rgb_image.shape}")
    plt.imshow(rgb_image)
    plt.axis('off')
    # plt.show()  # Commented out
    if len(save_path) > 0:
        plt.imsave(save_path, rgb_image)

def load_image(image_path,headerPath):
    # check if it's PSI image format
    with open(headerPath, "r") as file:
        first_line = file.readline().strip()
    print(first_line)
    if first_line.startswith("BYTEORDER"): # PSI format
        dictMeta = read_PSI_header(headerPath)
        headerPath = header_path
        create_envi_header(headerPath, dictMeta)

    hsi = envi.open(headerPath, image_path)
    return hsi

def calculate_ndvi(hsi):
    """
    Calculate NDVI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - ndvi_array: Calculated NDVI as a numpy array.
    """
    # Assume Near Infrared (NIR) band is around 800 nm and Red band is around 670 nm
    nir_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[0]
    red_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1]

    nir_band = hsi.read_band(nir_band_index)
    red_band = hsi.read_band(red_band_index)

    ndvi_array = (nir_band - red_band) / (nir_band + red_band + 1e-10)  # Add small value to avoid division by zero
    return ndvi_array


def show_ndvi(hsi, save_path):
    """
    Visualize NDVI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the NDVI image.
    """
    ndvi_array = calculate_ndvi(hsi)
    ndvi_image = (ndvi_array - np.min(ndvi_array)) / (np.max(ndvi_array) - np.min(ndvi_array))  # Normalize to 0-1

    plt.imshow(ndvi_image, cmap='RdYlGn')
    plt.colorbar(label='NDVI')
    plt.title("NDVI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, ndvi_image, cmap='RdYlGn')


def calculate_evi(hsi):
    """
    Calculate EVI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - evi_array: Calculated EVI as a numpy array.
    """
    nir_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[0]
    red_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1]
    blue_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[2]

    nir_band = hsi.read_band(nir_band_index)
    red_band = hsi.read_band(red_band_index)
    blue_band = hsi.read_band(blue_band_index)

    # Calculate EVI
    numerator = nir_band - red_band
    denominator = (nir_band + 6 * red_band - 7.5 * blue_band + 1)

    # Ignore divide by zero and invalid warnings
    with np.errstate(divide='ignore', invalid='ignore'):
        evi_array = numerator / denominator
        evi_array[np.isnan(evi_array)] = 0  # Set NaNs to 0

    return evi_array


def show_evi(hsi, save_path):
    """
    Visualize EVI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the EVI image.
    """
    evi_array = calculate_evi(hsi)

    # Replace NaNs and Infs with finite numbers (0)
    evi_array = np.nan_to_num(evi_array, nan=0.0, posinf=0.0, neginf=0.0)

    # Normalize EVI for visualization
    min_val = np.min(evi_array)
    max_val = np.max(evi_array)

    # Ensure the denominator is not zero
    range_val = max_val - min_val
    if range_val == 0:
        range_val = 1e-10

    evi_image = (evi_array - min_val) / range_val

    plt.imshow(evi_image, cmap='RdYlGn')
    plt.colorbar(label='EVI')
    plt.title("EVI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, evi_image, cmap='RdYlGn')


def calculate_mcari(hsi):
    """
    Calculate MCARI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - mcari_array: Calculated MCARI as a numpy array.
    """
    # Find the band indices corresponding to 700 nm, 670 nm, and 550 nm
    band_700_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[0]  # Assuming 700 nm is near NIR
    band_670_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1]  # Assuming 670 nm is red
    band_550_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1] - 1  # Assuming 550 nm is green

    band_700 = hsi.read_band(band_700_index)
    band_670 = hsi.read_band(band_670_index)
    band_550 = hsi.read_band(band_550_index)

    # Calculate MCARI
    with np.errstate(divide='ignore', invalid='ignore'):
        mcari_array = (band_700 - band_670) - 0.2 * (band_700 - band_550) * (
                    band_700 / (band_670 + 1e-10))  # Add small constant to avoid divide by zero
        mcari_array[np.isnan(mcari_array)] = 0  # Set NaNs to 0

    return mcari_array


def show_mcari(hsi, save_path):
    """
    Visualize MCARI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the MCARI image.
    """
    mcari_array = calculate_mcari(hsi)

    # Replace NaNs and Infs with finite numbers (0)
    mcari_array = np.nan_to_num(mcari_array, nan=0.0, posinf=0.0, neginf=0.0)

    # Normalize MCARI for visualization
    min_val = np.min(mcari_array)
    max_val = np.max(mcari_array)

    # Ensure the denominator is not zero
    range_val = max_val - min_val
    if range_val == 0:
        range_val = 1e-10

    mcari_image = (mcari_array - min_val) / range_val

    plt.imshow(mcari_image, cmap='viridis')
    plt.colorbar(label='MCARI')
    plt.title("MCARI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, mcari_image, cmap='viridis')


def calculate_mtvi(hsi):
    """
    Calculate MTVI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - mtvi_array: Calculated MTVI as a numpy array.
    """
    # Find the band indices corresponding to 800 nm, 670 nm, and 550 nm
    band_800_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[0]  # Assuming 800 nm is NIR
    band_670_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1]  # Assuming 670 nm is red
    band_550_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1] - 1  # Assuming 550 nm is green

    band_800 = hsi.read_band(band_800_index)
    band_670 = hsi.read_band(band_670_index)
    band_550 = hsi.read_band(band_550_index)

    # Calculate MTVI
    mtvi_array = 1.2 * ((1.2 * (band_800 - band_550)) - (2.5 * (band_670 - band_550)))

    return mtvi_array


def show_mtvi(hsi, save_path):
    """
    Visualize MTVI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the MTVI image.
    """
    mtvi_array = calculate_mtvi(hsi)

    # Replace NaNs and Infs with finite numbers (0)
    mtvi_array = np.nan_to_num(mtvi_array, nan=0.0, posinf=0.0, neginf=0.0)

    # Normalize MTVI for visualization
    min_val = np.min(mtvi_array)
    max_val = np.max(mtvi_array)

    # Ensure the denominator is not zero
    range_val = max_val - min_val
    if range_val == 0:
        range_val = 1e-10

    mtvi_image = (mtvi_array - min_val) / range_val

    plt.imshow(mtvi_image, cmap='viridis')
    plt.colorbar(label='MTVI')
    plt.title("MTVI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, mtvi_image, cmap='viridis')


def calculate_osavi(hsi):
    """
    Calculate OSAVI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - osavi_array: Calculated OSAVI as a numpy array.
    """
    nir_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[0]  # NIR around 800 nm
    red_band_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1]  # Red around 670 nm

    nir_band = hsi.read_band(nir_band_index)
    red_band = hsi.read_band(red_band_index)

    osavi_array = (nir_band - red_band) / (nir_band + red_band + 0.16)
    return osavi_array


def show_osavi(hsi, save_path):
    """
    Visualize OSAVI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the OSAVI image.
    """
    osavi_array = calculate_osavi(hsi)
    osavi_image = (osavi_array - np.min(osavi_array)) / (np.max(osavi_array) - np.min(osavi_array))

    plt.imshow(osavi_image, cmap='RdYlGn')
    plt.colorbar(label='OSAVI')
    plt.title("OSAVI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, osavi_image, cmap='RdYlGn')


def calculate_pri(hsi):
    """
    Calculate PRI from hyperspectral image data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.

    Returns:
    - pri_array: Calculated PRI as a numpy array.
    """
    # Find the band indices corresponding to 531 nm and 570 nm
    band_531_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[
                         1] - 2  # Assuming 531 nm is near green
    band_570_index = find_RGB_bands([float(i) for i in hsi.metadata['wavelength']])[1] - 1  # Assuming 570 nm is green

    band_531 = hsi.read_band(band_531_index)
    band_570 = hsi.read_band(band_570_index)

    # Calculate PRI
    with np.errstate(divide='ignore', invalid='ignore'):
        pri_array = (band_531 - band_570) / (band_531 + band_570 + 1e-10)  # Add small constant to avoid divide by zero
        pri_array[np.isnan(pri_array)] = 0  # Set NaNs to 0

    return pri_array


def show_pri(hsi, save_path):
    """
    Visualize PRI image from hyperspectral data.

    Parameters:
    - hsi: Hyperspectral image object loaded with spectral library.
    - save_path: File path to save the PRI image.
    """
    pri_array = calculate_pri(hsi)

    # Replace NaNs and Infs with finite numbers (0)
    pri_array = np.nan_to_num(pri_array, nan=0.0, posinf=0.0, neginf=0.0)

    # Normalize PRI for visualization
    min_val = np.min(pri_array)
    max_val = np.max(pri_array)

    # Ensure the denominator is not zero
    range_val = max_val - min_val
    if range_val == 0:
        range_val = 1e-10

    pri_image = (pri_array - min_val) / range_val

    plt.imshow(pri_image, cmap='Spectral')
    plt.colorbar(label='PRI')
    plt.title("PRI Image")
    plt.axis('off')
    # plt.show()  # Commented out
    plt.imsave(save_path, pri_image, cmap='Spectral')


def visualise_all(hsi, save_path_list):
    show_rgb(hsi, save_path_list[0])
    show_ndvi(hsi, save_path_list[1])
    show_evi(hsi, save_path_list[2])
    show_mcari(hsi, save_path_list[3])
    show_mtvi(hsi, save_path_list[4])
    show_osavi(hsi, save_path_list[5])
    show_pri(hsi, save_path_list[6])
