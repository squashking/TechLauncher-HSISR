import spectral.io.envi as envi
import os

def read_PSI_header(filePath):
    data_dict = {}
    # Open the text file
    with open(filePath, "r") as file:
        lines = file.readlines()
    # Parse the lines and store values in the dictionary
    wavelengths = []
    for line in lines:
        parts = line.strip().split(" ")
        if "WAVELENGTHS" in parts:
            reading_wavelengths = True
            continue
        elif "WAVELENGTHS_END" in parts:
            reading_wavelengths = False
            data_dict["WAVELENGTHS"] = wavelengths
            continue

        if len(parts) == 2:
            key, value = parts
            data_dict[key] = value
        elif reading_wavelengths:
            wavelengths.append(float(parts[0]))

    # Display the parsed data
    return data_dict


# create an ENVI header file for PSI images
def create_envi_header(filename, dictMeta):
    with open(filename, 'w') as file:
        file.write("ENVI\n")
        file.write("description = {Generated by Python}\n")
        file.write("bands = {}\n".format(dictMeta['NBANDS']))
        file.write("byte order = 0\n")
        file.write("data type = {}\n".format(dictMeta['NBITS']))
        file.write("file type = ENVI Standard\n")
        file.write("header offset = 0\n")
        file.write("interleave = {}\n".format(dictMeta['LAYOUT'].lower()))
        file.write("lines = {}\n".format(dictMeta['NROWS']))
        file.write("samples = {}\n".format(dictMeta['NCOLS']))
        # file.write("sensor type = Unknown\n")

        file.write("wavelength units = nm\n")
        file.write("wavelength = {")
        # for wavelength in dictMeta['WAVELENGTHS']:
        # file.write("{:.2f}, ".format(wavelength))
        file.write(','.join(map(str, dictMeta['WAVELENGTHS'])))
        file.write("}\n")


def load_hsi(bilpath,headerPath):
    # check if it's PSI image format
    with open(headerPath, "r") as file:
        first_line = file.readline().strip()
    if first_line.startswith("BYTEORDER"): # PSI format
        #rename
        base, ext = os.path.splitext(headerPath)
        new_headerPath = f"{base}_BYTEORDER{ext}"
        os.rename(headerPath, new_headerPath)
        #read data and create an ENVI one
        dictMeta = read_PSI_header(new_headerPath)
        create_envi_header(headerPath, dictMeta)

    hsi = envi.open(headerPath, bilpath)
    return hsi