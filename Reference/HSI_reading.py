from spectral import *
import spectral.io.envi as envi
import os

# this function assumes listWavelength is in ascending order    
def find_RGB_bands(listWavelength):
    R_wavelength = 682.5 #(625+740)/2 
    G_wavelength = 532.5  #(495+570)/2 
    B_wavelength = 472.5  #(450+495)/2 
    listlen = len(listWavelength) 
    if listlen < 3:
        print("Error: not a hyperspectral file")
        return
    if listWavelength[0] > B_wavelength or listWavelength[-1] < R_wavelength: # if not fully include RGB bands
        return (round(5*listlen/6), round(len/2), round(listlen/6)) # considering edge effect, not use (len, len/2, 1)
    
    rFound = gFound = bFound = False
    rPreDifference = gPreDifference = bPreDifference = float('inf') # previously calculated difference
    rIndex = gIndex = bIndex = 0

    for i, value in enumerate(listWavelength):
        if not rFound:
            difference = abs(value - R_wavelength)
            if difference < rPreDifference:  
                rPreDifference = difference
            else: # when the distance starts to grow bigger, the index is found, and it should be the previous i
                rIndex = i-1
                rFound = True

        if not gFound:
            difference = abs(value - G_wavelength)
            if difference < gPreDifference:
                gPreDifference = difference
            else:
                gIndex = i-1
                gFound = True

        if not bFound:
            difference = abs(value - B_wavelength)
            if difference < bPreDifference:
                bPreDifference = difference
            else:
                bIndex = i-1
                bFound = True 

    return (rIndex, gIndex, bIndex) 

def read_PSI_header(filePath):
    data_dict = {}

    # Open the text file
    with open(filePath, "r") as file:
        lines = file.readlines()

    # Parse the lines and store values in the dictionary
    wavelengths = []
    for line in lines:
        parts = line.strip().split(" ")
        if "WAVELENGTHS" in parts:
            reading_wavelengths = True
            continue
        elif "WAVELENGTHS_END" in parts:
            reading_wavelengths = False
            data_dict["WAVELENGTHS"] = wavelengths
            continue
        
        if len(parts) == 2:
            key, value = parts
            data_dict[key] = value
        elif reading_wavelengths:
            wavelengths.append(float(parts[0]))

    # Display the parsed data
    return data_dict      

#create an ENVI header file for PSI images
def create_envi_header(filename, dictMeta):
    with open(filename, 'w') as file:
        file.write("ENVI\n")
        file.write("description = {Generated by Python}\n")
        file.write("bands = {}\n".format(dictMeta['NBANDS']))
        file.write("byte order = 0\n")
        file.write("data type = {}\n".format(dictMeta['NBITS']))
        file.write("file type = ENVI Standard\n")
        file.write("header offset = 0\n")  
        file.write("interleave = {}\n".format(dictMeta['LAYOUT'].lower()))
        file.write("lines = {}\n".format(dictMeta['NROWS']))
        file.write("samples = {}\n".format(dictMeta['NCOLS']))
        # file.write("sensor type = Unknown\n")
        
        file.write("wavelength units = nm\n")        
        file.write("wavelength = {")
        # for wavelength in dictMeta['WAVELENGTHS']:
            # file.write("{:.2f}, ".format(wavelength))
        file.write(','.join(map(str, dictMeta['WAVELENGTHS'])))
        file.write("}\n")

def load_image(self):        
    imagePath, selectedFilter = QFileDialog.getOpenFileName(self, 'Open file', None,("RGB Images (*.png *.jpg *.jpeg *.bmp);;Hyperspc Images(*.bil *.bip *.bsq)"))
    
    self.image_path = imagePath                                                 
    rgb_image = None

    if selectedFilter == "Hyperspc Images(*.bil *.bip *.bsq)": # if it's hyperspec
        self.isHyperspc = True
        directory = os.path.dirname(self.image_path)
        base_name = os.path.basename(self.image_path)
        filename, extension = os.path.splitext(base_name)
        headerPath = directory + "/"+ filename + ".hdr"
        if (not os.path.exists(headerPath)): #if no header file, show error and return
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Icon.Critical)
            msg_box.setWindowTitle("Error")
            msg_box.setText("Header file not found!")
            msg_box.exec()
            return
        
        # check if it's PSI image format
        with open(headerPath, "r") as file:
            first_line = file.readline().strip()

        if first_line.startswith("BYTEORDER"): # PSI format
            dictMeta = read_PSI_header(headerPath)
            headerPath = directory + "/"+ filename + "_envi.hdr" # new header file
            create_envi_header(headerPath, dictMeta)
            

        self.hsi = envi.open(headerPath, self.image_path)
        tuple_rgb_bands = find_RGB_bands([float(i) for i in self.hsi.metadata['wavelength']]) # metadata['wavelength'] is read as string; for CSIRO image, can use self.hsi.bands.centers
        rgb_image = get_rgb(self.hsi, tuple_rgb_bands) #(100, 54, 31)
        rgb_image = (rgb_image*255).astype(np.uint8)
        rgb_image = rgb_image.copy() # Spy don't load it to memory automatically, so must be copied
        # rgb_image = np.array(rgb_image)

    else: # RGB images 
        rgb_image = cv2.imread(self.image_path)
        rgb_image = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2RGB)

    self.viewer.rgb = rgb_image
    #self.viewer.setPhoto(QPixmap(self.image_path))
    self.viewer.setPhoto(numpy_to_qpixmap(rgb_image))    